Основная структура программы делится на 3 большие части:

1. Библиотека API SolidWorks - поставляется отдельно, обычно можно найти в папке с SolidWorks

2. Обёртка над библиотекой SolidWorks - SwApiLib
    Нужна для более удобного взаимодействия с "неуправляемым" кодом
    Обеспечивает типобезопасность операций
    Так же содержит внутри себя основную часть логики программы (бизнес логика)
    
3. Проект с визуальной оболочкой программы
   Написан на WPF, включает в себя библиотеку SwApiLib, содержит логику для отображения и взаимодействия с пользователем 

Дополнительные проекты служат для тестирования, и не являются частью основной программы.


API SolidWorks:
Находится в пространстве имён Interop.SolidWorks
    Подключается к программе SolidWorks при помощи COM
    https://ru.wikipedia.org/wiki/COM_Interop

    Перед использованием необходимо подключиться к процессу SolidWorks внутренними средствами языка.
    Сейчас существует 2 класса для подключения к COM
        1. SWAPIlib.ComConn.SwAppControl 
            Устарел, но до сих пор используется как основной.
            Точка входа - метод Connect()
            Циклически пытается подключиться к процессу SolidWorks
            После чего возможно использование объекта SwApp из стандартной библиотеки SolidWorks (описание можно почитать в SolidWorks -> Справка -> Справка по API -> Вбить в поиск "ISldWorks Interface")
        2. TestSolidApp.SW.SwConnector (в отдельном проекте, не интегрирован в основной)
            Реализует интерфейс ISwConnector
            Точка входа - метод Connect()
            Так же позволяет использовать интерфейс ISldWorks через параметр SwApp
            Попытка подключения выполняется единоразово
        
    Методы для взаимодействия с библиотекой SolidWorks
        Все обращения к библиотеке солида происходят через методы классов внутри пространства имён SwApiLib.ComConn.ComObjectProxy


Перед попыткой изменений требуется переключиться на GIT-ветку ActionUnitImplement. Там были пофиксены простыни непонятного кода, добавлены новые классы и комментарии.

Процесс взаимодействия реализован следующим образом:
1. При открытии главного окна загружается UserControl 
    SolidSaverWpf.View.DocLoaderView к которому привязан класс
    SolidSaverWpf.ViewModel.DocLoaderViewModel.DocLoaderViewModel2

    Логика подключения находится внутри класса:
    После нажатия кнопки "загрузить" происходит вызов метода UpdateDocumentList() 
    Который обращается к классу SwApiLib.Global.DocLoader
        Который загружает список активных документов SW и оборачивает их в легковесный класс ModelWrapper для отображения имени и хранения ссылки на "сырой" класс SolidWorks
2. При нажатии кнопки "загрузить" 
    класс ModelWrapper передаётся в метод SwApiLib.Global.MainModel.SetMainModel() и загружается список компонентов
3. Загружается спиосок компонентов внутри сборки
    За отображение списка компонентов отвечает класс SolidSaverWpf.ViewModel.PartListViewModel, который содержит список классов SwApiLib.Controller.Part.ComponentControl
    Класс компонента содержит много мусора, и по идее его надо переписать

4. Основная логика отображения и сохранения свойств сейчас находится в классах
    4.1 SolidSaverWPF.ViewModel.TaskViewModel - отображение и глобальные методы
        (метод LoadSelection)
    4.2 SwApiLib.TaskCollection.TableProviderTemp.TableProviderTemp - класс для определения зависимостей и передачи в интерфейс (в целом, не нужен, требуется переписать)
    4.3 SWAPIlib.TaskCollection.TestAction - Класс с логикой обработки свойств.
        Все изменения желательно делать либо в viewModel, либо здесь

5. Общий принцип взаимодействия:
    Все свойства основаны на таблицах (ITable) и ячейках таблиц (ICell)
    Ячейки и таблицы находятся в пространстве имён SwApiLib.Table

    Ячейка - универсальный интерфейс, внутри которого содержится 
        1. Текст Ячейки
        2. Метод Update() - для пересчёта значения Ячейки
        Опционально - 
        3. Временный текст и метод WriteValue() - после вызова метода будет произведена попытка записи значения TempText в постоянное значение.
        4. Ячейка может содержать ссылку на таблицу, внутри которой может находиться необходимая служебная информация (другие ячейки, или объект привязки Target)
        Ячейки задающие конкретную логику взаимодействия находятся внутри папки Table.Prop и Table.SwProp (Изменение наименования или обозначения)
    Таблица - список ключ-значение, 
        где в качестве ключа выступает строка, а в качестве значения - ячейка. Для получения ячейки из таблицы необходимо знать её ключ или получить список всех значений для фильтрации
        Внутри таблицы также содержится метод GetTarget() который возвращает ссылку на объект к которому привязана таблица (конкретная деталь, сборка, модель, компонент, или что угодно другое)
    Задача - интерфейс IAction внутри папки TaskCollection
        Логически объединённый список каких либо взаимодействий с таблицами
        В качестве задач может выступать что угодно - добавление новых ячеек в таблицу, изменение ячейки или группы ячеек внутри таблицы, и т.п.
    TaskCollection - Логически сгруппированный список задач и классов для взаимодействия с группой таблиц
    
    TaskUnits - папка содержит классы верхнего уровня, которые отвечают за группировку списков задач и взаимодействия групп задач с группами таблиц




    


    
